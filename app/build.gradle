/*
 * Copyright (c) 2017 Zac Sweers
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    jcenter()
    maven { url "https://maven.google.com" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }

  }

  dependencies {
    classpath rootProject.ext.androidPlugin
    classpath rootProject.ext.kotlinPlugin
    classpath rootProject.ext.bugsnagPlugin
    classpath rootProject.ext.psyncPlugin
    classpath rootProject.ext.versionsPlugin
    classpath rootProject.ext.errorPronePlugin
    classpath rootProject.ext.apolloPlugin
  }
}

apply plugin: 'com.android.application'
apply plugin: 'com.flipboard.psync'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: "net.ltgt.errorprone"
apply plugin: 'com.github.ben-manes.versions' // ./gradlew dependencyUpdates -Drevision=release
apply plugin: 'com.apollographql.android'
//apply plugin: 'com.bugsnag.android.gradle'

private String getPropertyOrEmpty(String property) {
  if (hasProperty(property)) {
    return project.properties[property]
  } else {
    return ""
  }
}

repositories {
  jcenter()
  maven { url "https://jitpack.io" }
  maven { url "https://maven.google.com" }
  maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId "io.sweers.catchup"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode rootProject.ext.gitCommitCount
    versionName rootProject.ext.gitTag
    multiDexEnabled true
    archivesBaseName = "catchup"
    vectorDrawables.useSupportLibrary = true

    buildConfigField 'String', 'GIT_SHA', /"$gitSha"/
    buildConfigField 'long', 'GIT_TIMESTAMP', "$gitTimestamp"
    buildConfigField 'String', 'PROCUCT_HUNT_DEVELOPER_TOKEN',
        /"${getPropertyOrEmpty("catchup_product_hunt_developer_token")}"/
    buildConfigField 'String', 'GITHUB_DEVELOPER_TOKEN',
        /"${getPropertyOrEmpty("catchup_github_developer_token")}"/
    buildConfigField 'String', 'DRIBBBLE_CLIENT_ACCESS_TOKEN',
        /"${getPropertyOrEmpty("catchup_dribbble_access_token")}"/
    buildConfigField 'String', 'SMMRY_API_KEY', /"${getPropertyOrEmpty("catchup_smmry_api_key")}"/
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  signingConfigs {
    if (getPropertyOrEmpty("catchup_signing_location")) {
      release {
        storeFile file(getPropertyOrEmpty("catchup_signing_location"))
        keyAlias getPropertyOrEmpty("catchup_signing_alias")
        storePassword getPropertyOrEmpty("catchup_signing_store_password")
        keyPassword getPropertyOrEmpty("catchup_signing_key_password")
        v2SigningEnabled true
      }
    } else {
      release {
        storeFile file("placeholder")
        keyAlias "placeholder"
        storePassword "placeholder"
        keyPassword "placeholder"
        v2SigningEnabled true
      }
    }
  }
  sourceSets {
    // For kapt
    main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
  }
  packagingOptions {
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'LICENSE.txt'
    exclude 'META-INF/rxjava.properties'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      versionNameSuffix "-dev"
    }
    release {
      buildConfigField 'String', 'BUGSNAG_KEY', /"${getPropertyOrEmpty("catchup_bugsnag_key")}"/
      signingConfig signingConfigs.release
      postprocessing.proguardFiles =
          [getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro']
    }
  }
  dexOptions {
    javaMaxHeapSize "2g"
  }
  lintOptions {
    lintConfig file("lint.xml")
    abortOnError true
    check 'NewApi', 'InlinedApi'
    fatal 'NewApi', 'InlinedApi'
    enable 'UnusedResources'
    checkReleaseBuilds true
    textReport rootProject.ext.ci
    textOutput 'stdout'
    htmlReport !rootProject.ext.ci
    xmlReport !rootProject.ext.ci
  }
  applicationVariants.all {
    // Configure firebase
    String apiKey = null
    String appId = null
    String databaseUrl = null
    String gaTrackingId = null
    String gcmDefaultSender = null
    String storageBucket = null
    String defaultWebClientId = null
    String crashReportingApiKey = null
    String projectId = null
    if (it.buildType.name == "debug") {
      apiKey = project.properties.get('catchup.google_api_key.debug')
      appId = project.properties.get('catchup.google_app_id.debug')
      databaseUrl = project.properties.get('catchup.firebase_database_url.debug')
      gaTrackingId = project.properties.get('catchup.ga_trackingId.debug')
      gcmDefaultSender = project.properties.get('catchup.gcm_defaultSenderId.debug')
      storageBucket = project.properties.get('catchup.google_storage_bucket.debug')
      defaultWebClientId = project.properties.get('catchup.default_web_client_id.debug')
      crashReportingApiKey = project.properties.get('catchup.google_crash_reporting_api_key.debug')
      projectId = 'catchup.project_id.debug'
    } else if (it.buildType.name == "release") {
      apiKey = project.properties.get('catchup.google_api_key')
      appId = project.properties.get('catchup.google_app_id')
      databaseUrl = project.properties.get('catchup.firebase_database_url')
      gaTrackingId = project.properties.get('catchup.ga_trackingId')
      gcmDefaultSender = project.properties.get('catchup.gcm_defaultSenderId')
      storageBucket = project.properties.get('catchup.google_storage_bucket')
      defaultWebClientId = project.properties.get('catchup.default_web_client_id')
      crashReportingApiKey = project.properties.get('catchup.google_crash_reporting_api_key')
      projectId = project.properties.get('catchup.project_id')
    }
    if (apiKey) {
      it.resValue 'string', 'google_api_key', apiKey
    }
    if (appId) {
      it.resValue 'string', 'google_app_id', appId
    }
    if (databaseUrl) {
      it.resValue 'string', 'firebase_database_url', databaseUrl
    }
    if (gaTrackingId) {
      it.resValue 'string', 'ga_trackingId', gaTrackingId
    }
    if (gcmDefaultSender) {
      it.resValue 'string', 'gcm_defaultSenderId', gcmDefaultSender
    }
    if (storageBucket) {
      it.resValue 'string', 'google_storage_bucket', storageBucket
    }
    if (defaultWebClientId) {
      it.resValue 'string', 'default_web_client_id', defaultWebClientId
    }
    if (crashReportingApiKey) {
      it.resValue 'string', 'google_crash_reporting_api_key', crashReportingApiKey
    }
    if (projectId) {
      it.resValue 'string', 'project_id', projectId
    }
  }
}

//if (getPropertyOrEmpty("catchup_bugsnag_key")) {
//  bugsnag {
//    apiKey getPropertyOrEmpty("catchup_bugsnag_key")
//  }
//}

psync {
  includesPattern = "**/xml/prefs_*.xml"
  generateRx = true
}

apollo {
  customTypeMapping {
    DateTime = "org.threeten.bp.Instant"
  }
  customTypeMapping['URI'] = "okhttp3.HttpUrl"
}

def supportLibraries = configurations.create("supportImplementation")
configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group == 'com.android.support' &&
        !details.requested.name.contains('multidex')) {
      // We want to force all support libraries to use the same version, even if they're transitive.
      details.useVersion rootProject.ext.supportVersion
    }
    if (details.requested.group == 'com.google.android.gms') {
      // We want to force all play services libraries to use the same version, even if they're transitive.
      details.useVersion rootProject.ext.playServicesVersion
    }
    if (details.requested.group == 'com.google.firebase') {
      // We want to force all play services libraries to use the same version, even if they're transitive.
      details.useVersion rootProject.ext.firebaseVersion
    }
  }
}

dependencies {
  // Support libs
  supportImplementation rootProject.ext.supportAnnotations
  supportImplementation rootProject.ext.supportAppCompat
  supportImplementation rootProject.ext.supportV4
  supportImplementation rootProject.ext.supportDesign
  supportImplementation rootProject.ext.supportCustomTabs
  supportImplementation rootProject.ext.constraintLayout
  supportImplementation rootProject.ext.supportPalette
  supportImplementation rootProject.ext.supportCompat

  implementation supportLibraries
  testImplementation supportLibraries
  androidTestImplementation supportLibraries

  // Kotlin
  implementation rootProject.ext.kotlinStdLib
  implementation rootProject.ext.kotlinStdLib7

  // Firebase
  implementation rootProject.ext.firebaseCore
  implementation rootProject.ext.firebaseConfig
  implementation rootProject.ext.firebaseDatabase
  kapt rootProject.ext.autoValueFirebase
  compileOnly rootProject.ext.autoValueFirebaseAnnotation
  implementation rootProject.ext.autoValueFirebaseAdapter

  // Square/JW
  implementation rootProject.ext.butterKnife
  kapt rootProject.ext.butterKnifeCompiler
  implementation rootProject.ext.okhttp
  implementation rootProject.ext.okio
  implementation rootProject.ext.moshi
  implementation rootProject.ext.retrofit
  implementation rootProject.ext.retrofitMoshi
  implementation rootProject.ext.retrofitRxJava
  implementation(rootProject.ext.retrofitXml) {
    exclude module: 'stax'
    exclude module: 'stax-api'
    exclude module: 'xpp3'
  }
  implementation rootProject.ext.rxAndroid
  implementation rootProject.ext.rxAndroid2
  implementation rootProject.ext.rxJava
  implementation rootProject.ext.rxJava2
  implementation rootProject.ext.rxJava2Interop
  implementation rootProject.ext.retrofitRxJava2
  implementation rootProject.ext.rxBinding
  implementation rootProject.ext.rxBindingV4
  implementation rootProject.ext.rxBindingDesign
  implementation rootProject.ext.timber
  implementation rootProject.ext.threetenabp
  debugImplementation rootProject.ext.madge
  debugImplementation rootProject.ext.scalpel
  implementation rootProject.ext.processPhoenix
  // Move back to debugImplementation when it's not needed for daynight
  debugImplementation rootProject.ext.telescope
  implementation rootProject.ext.okhttpLoggingInterceptor
  debugImplementation rootProject.ext.retrofitMock

  releaseImplementation rootProject.ext.bugsnag

  // Misc
  implementation rootProject.ext.autoDispose
  implementation rootProject.ext.autoDisposeAndroid
  implementation rootProject.ext.autoDisposeKotlin
  errorprone rootProject.ext.errorProneCore
  implementation rootProject.ext.errorProneAnnotations
  implementation rootProject.ext.barberApi
  kapt rootProject.ext.barberCompiler
  implementation rootProject.ext.glide
  implementation rootProject.ext.glideOkhttp
  implementation rootProject.ext.lottie
  implementation rootProject.ext.recyclerViewAnimators
  implementation rootProject.ext.rxJava
  implementation rootProject.ext.rxPreferences
  implementation rootProject.ext.rxReceivers
  implementation rootProject.ext.rxRelay
  implementation(rootProject.ext.simpleXml) {
    exclude module: 'stax'
    exclude module: 'stax-api'
    exclude module: 'xpp3'
  }
  implementation rootProject.ext.moshiLazyAdapters

  // Apollo
  implementation rootProject.ext.apolloRuntime
  implementation rootProject.ext.apolloRx2Support
  implementation rootProject.ext.apolloAndroidSupport

  // Stetho
  debugImplementation rootProject.ext.stetho
  debugImplementation rootProject.ext.stethoOkHttp

  // Dagger
  kapt rootProject.ext.daggerCompiler
  compileOnly rootProject.ext.javax
  implementation rootProject.ext.dagger
  implementation rootProject.ext.daggerAndroid

  // AutoValue
  compileOnly rootProject.ext.autoValueAnnotations
  implementation rootProject.ext.autoValueMoshiAnnotations
  kapt rootProject.ext.autoValue
  kapt rootProject.ext.autoValueMoshi
  kapt rootProject.ext.autoValueRedacted

  // Conductor
  implementation rootProject.ext.conductor
  implementation rootProject.ext.conductorSupport

  implementation rootProject.ext.jsr305

  // Test
  testImplementation rootProject.ext.rxJava2Extensions
  testImplementation rootProject.ext.rxRelay
  androidTestImplementation rootProject.ext.errorProneAnnotations
  androidTestImplementation rootProject.ext.rxJava2
  androidTestImplementation rootProject.ext.jsr305
  testImplementation rootProject.ext.jsr305
  testImplementation rootProject.ext.errorProneAnnotations
  testImplementation rootProject.ext.junit
  testImplementation rootProject.ext.truth

  // LeakCanary
  debugImplementation rootProject.ext.leakCanary
  releaseImplementation rootProject.ext.leakCanaryNoop

  // Chuck
  debugImplementation rootProject.ext.chuck
  releaseImplementation rootProject.ext.chuckNoop
}
